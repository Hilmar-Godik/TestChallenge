OBJECT Codeunit 85301 Test Challenge 01
{
  OBJECT-PROPERTIES
  {
    Date=21-06-19;
    Time=11:58:48;
    Version List=TestChallenge1.00;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE AddComment@100000002(VAR Comment@100000000 : Text[1024];NewComment@100000001 : Text[1024]);
    BEGIN
      AddCommentSeparator(Comment,NewComment,';');
    END;

    PROCEDURE AddCommentSeparator@13(VAR AllComments@1001 : Text[1024];NewComment@1000 : Text[1024];Separator@1002 : Text[10]);
    BEGIN
      // The function is supposed to append the NewComment to the AllComments variable and thus return it.
      // The comments are separated by the Separator text.
      // More details can be deducted from the test itself.
      // Implement your solution here.
      AllComments := '';
    END;

    PROCEDURE EvaluateDateFromXMLDateTime@1(VAR Date@100000000 : Date;ISO8601DateTime@100000001 : Text[100]) : Boolean;
    VAR
      Year@100000002 : Integer;
      Month@100000003 : Integer;
      Day@100000004 : Integer;
    BEGIN
      // The function is supposed to extract the date from an ISO 8601 DateTime and return it through the Date variable
      // If a valid date was found, the function returns TRUE otherwise FALSE.
      // More details can be deducted from the test itself.
      // Implement your solution here. You can use the TryDMY2DATE function below.
      Date := 0D;
      EXIT(FALSE);
    END;

    [TryFunction]
    PROCEDURE TryDMY2DATE@100000001(Day@100000000 : Integer;Month@100000001 : Integer;Year@100000002 : Integer;VAR Date@100000003 : Date);
    BEGIN
      Date := DMY2DATE(Day,Month,Year);
    END;

    [Test]
    PROCEDURE TestAddComment1@100000009();
    VAR
      Text@100000001 : Text[1024];
      OriginalText@1000 : Text[1024];
    BEGIN
      Text := '';
      AddComment(Text,'');
      IF NOT (Text = '') THEN
        ERROR('Expected: Adding an empty string to an empty string should result in an empty string. "%1"',Text);
    END;

    [Test]
    PROCEDURE TestAddComment2@6();
    VAR
      Text@100000001 : Text[1024];
      OriginalText@1000 : Text[1024];
    BEGIN
      Text := 'OK';
      OriginalText := Text;
      AddComment(Text,'');
      IF NOT (Text = OriginalText) THEN
        ERROR('Expected: Adding an empty string to a non empty string should result in the original string. "%1"',Text);
    END;

    [Test]
    PROCEDURE TestAddComment3@5();
    VAR
      Text@100000001 : Text[1024];
      OriginalText@1000 : Text[1024];
    BEGIN
      Text := '';
      AddComment(Text,'OK');
      IF NOT (Text = 'OK') THEN
        ERROR('Expected: Adding a non empty string to an empty string should result in the added string. "%1"',Text);
    END;

    [Test]
    PROCEDURE TestAddComment4@4();
    VAR
      Text@100000001 : Text[1024];
      OriginalText@1000 : Text[1024];
    BEGIN
      Text := 'OK';
      OriginalText := Text;
      AddComment(Text,'OK');
      IF NOT (Text = OriginalText) THEN
        ERROR('Expected: Adding the identical comment again should not change the string. "%1"',Text);
    END;

    [Test]
    PROCEDURE TestAddComment5@3();
    VAR
      Text@100000001 : Text[1024];
      OriginalText@1000 : Text[1024];
    BEGIN
      Text := 'OK1;OK2;OK3;OK4';
      OriginalText := Text;
      AddComment(Text,'OK3');
      IF NOT (Text = OriginalText) THEN
        ERROR('Expected: Adding the same comment again should not change the string. "%1"',Text);
    END;

    [Test]
    PROCEDURE TestAddComment6@2();
    VAR
      Text@100000001 : Text[1024];
      OriginalText@1000 : Text[1024];
    BEGIN
      Text := PADSTR('',MAXSTRLEN(Text),'X');
      OriginalText := Text;
      AddComment(Text,'Y');
      IF NOT (Text = OriginalText) THEN
        ERROR('Expected: Adding more text to a string that is already full should not change the string. "%1"',Text);
    END;

    [Test]
    PROCEDURE TestEvaluateDateFromXMLDateTime1@100000007();
    VAR
      Date@100000001 : Date;
      DateTimeText@100000002 : Text;
    BEGIN
      DateTimeText := '2019-05-07T00:00:00';
      IF NOT EvaluateDateFromXMLDateTime(Date,DateTimeText) THEN
        ERROR('Expected to extracte a date from "%1"',DateTimeText);
    END;

    [Test]
    PROCEDURE TestEvaluateDateFromXMLDateTime2@12();
    VAR
      Date@100000001 : Date;
      DateTimeText@100000002 : Text;
    BEGIN
      DateTimeText := '2019-05-07';
      IF NOT EvaluateDateFromXMLDateTime(Date,DateTimeText) THEN
        ERROR('Expected to extracte a date from "%1"',DateTimeText);
    END;

    [Test]
    PROCEDURE TestEvaluateDateFromXMLDateTime3@11();
    VAR
      Date@100000001 : Date;
      DateTimeText@100000002 : Text;
    BEGIN
      DateTimeText := '2019-02-28T12:34:56';
      IF NOT EvaluateDateFromXMLDateTime(Date,DateTimeText) THEN
        ERROR('Expected to extracte a date from "%1"',DateTimeText);
    END;

    [Test]
    PROCEDURE TestEvaluateDateFromXMLDateTime4@10();
    VAR
      Date@100000001 : Date;
      DateTimeText@100000002 : Text;
    BEGIN
      DateTimeText := '2019-02-29T12:34:56';
      IF EvaluateDateFromXMLDateTime(Date,DateTimeText) THEN
        ERROR('Expected to fail extracting a date from "%1"',DateTimeText);
    END;

    [Test]
    PROCEDURE TestEvaluateDateFromXMLDateTime5@9();
    VAR
      Date@100000001 : Date;
      DateTimeText@100000002 : Text;
    BEGIN
      DateTimeText := 'YYYY-MM-DDT12:34:56';
      IF EvaluateDateFromXMLDateTime(Date,DateTimeText) THEN
        ERROR('Expected to fail extracting a date from "%1"',DateTimeText);
    END;

    [Test]
    PROCEDURE TestEvaluateDateFromXMLDateTime6@8();
    VAR
      Date@100000001 : Date;
      DateTimeText@100000002 : Text;
    BEGIN
      DateTimeText := '';
      IF EvaluateDateFromXMLDateTime(Date,DateTimeText) THEN
        ERROR('Expected to fail extracting a date from an empty string');
    END;

    [Test]
    PROCEDURE TestTryDMY2DATE@100000004();
    VAR
      Date@100000001 : Date;
    BEGIN
      IF NOT TryDMY2DATE(29,2,2020,Date) THEN
        ERROR('Expected to evaluate 29/2/2020 to a date.');

      IF TryDMY2DATE(29,2,2019,Date) THEN
        ERROR('Expected to fail evaluating 29/2/2019 to a date.');
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 85302 Test Challenge 02
{
  OBJECT-PROPERTIES
  {
    Date=05-11-19;
    Time=01:37:29;
    Version List=TestChallenge1.00;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE hex2int@1(hex@1000 : Code[16]) int : BigInteger;
    BEGIN
      // The function is supposed to convert a hex number to an integer.
      // More details can be deducted from the test itself.
      // Implement your solution here.

      EXIT(0);
    END;

    PROCEDURE int2hex@2(int@1000 : BigInteger) hex : Code[16];
    BEGIN
      // The function is supposed to convert an integer to hexadecimal.
      // More details can be deducted from the test itself.
      // Implement your solution here.

      EXIT('');
    END;

    [TryFunction]
    PROCEDURE hex2intTry@13(hex@1000 : Code[16];VAR int@1001 : BigInteger);
    BEGIN
      int := hex2int(hex);
    END;

    [Test]
    PROCEDURE TestSimpleInt2Hex01@3();
    VAR
      int@1000 : Integer;
      hex@1001 : Code[20];
    BEGIN
      int := 15;
      hex := 'F';
      IF NOT (int2hex(int) = hex) THEN
        ERROR('Expected: int2hex("%1") = %2',int,hex);
    END;

    [Test]
    PROCEDURE TestSimpleInt2Hex02@4();
    VAR
      int@1000 : Integer;
      hex@1001 : Code[20];
    BEGIN
      int := 255;
      hex := 'FF';
      IF NOT (int2hex(int) = hex) THEN
        ERROR('Expected: int2hex("%1") = %2',int,hex);
    END;

    [Test]
    PROCEDURE TestSimpleHex2Int03@7();
    VAR
      int@1000 : Integer;
      hex@1001 : Code[20];
    BEGIN
      int := 15;
      hex := 'F';
      IF NOT (int = hex2int(hex)) THEN
        ERROR('Expected: hex2int("%1") = %2',hex,int);
    END;

    [Test]
    PROCEDURE TestSimpleHex2Int04@8();
    VAR
      int@1000 : Integer;
      hex@1001 : Code[20];
    BEGIN
      int := 255;
      hex := 'FF';
      IF NOT (int = hex2int(hex)) THEN
        ERROR('Expected: hex2int("%1") = %2',hex,int);
    END;

    [Test]
    PROCEDURE TestRandomDouble05@6();
    VAR
      int@1000 : Integer;
      expectedInt@1001 : Integer;
      i@1002 : Integer;
    BEGIN
      FOR i := 1 TO 100000 DO BEGIN
        int := RANDOM(999999999);
        expectedInt := hex2int(int2hex(int));
        IF NOT (expectedInt = int) THEN
          ERROR('Expected: converting "%1" to hex and back should result in the original value. Got %2',int,expectedInt);
      END;
    END;

    [Test]
    PROCEDURE TestRandomTrible06@5();
    VAR
      int@1000 : Integer;
      hex@1001 : Code[20];
      expectedHex@1002 : Code[10];
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO 100000 DO BEGIN
        int := RANDOM(999999999);
        hex := int2hex(int);
        expectedHex := int2hex(hex2int(hex));
        IF NOT (expectedHex = hex) THEN
          ERROR('Expected: converting "%1" to int and back should result in the original value. Got %2',hex,expectedHex);
      END;
    END;

    [Test]
    PROCEDURE Test15hexdigits07@9();
    VAR
      int@1000 : BigInteger;
      hex@1001 : Code[20];
      expectedHex@1002 : Code[20];
      i@1003 : Integer;
      j@1004 : Integer;
    BEGIN
      FOR i := 1 TO 15 DO BEGIN
        int := 1;
        FOR j := 1 TO i DO
          int := int * 16;
        int := int - 1;
        hex := int2hex(int);
        expectedHex := PADSTR('',i,'F');
        IF NOT (expectedHex = hex) THEN
          ERROR('Expected: (16^%1)-1 should result in F %1 times. Got "%2" <> "%3"',i,hex,expectedHex);
      END;
    END;

    [Test]
    PROCEDURE TestMaxBigInteger08@12();
    VAR
      int@1000 : BigInteger;
      hex@1001 : Code[20];
      expectedHex@1002 : Code[20];
    BEGIN
      int := 9223372036854775807L;
      hex := int2hex(int);
      expectedHex := PADSTR('7',16,'F');
      IF NOT (expectedHex = hex) THEN
        ERROR('Expected: int2hex %1 should result in %3 (%5). Got %2 (%4)',int,hex,expectedHex,STRLEN(hex),STRLEN(expectedHex));
    END;

    [Test]
    PROCEDURE TestNegativeNumber2Hex09@10();
    VAR
      int@1002 : BigInteger;
      hex@1001 : Code[20];
      expectedHex@1000 : Code[20];
    BEGIN
      int := -1;
      hex := int2hex(int);
      expectedHex := '';
      IF NOT (expectedHex = hex) THEN
        ERROR('Expected: int2hex %1 should result in the empty string. Got "%2"',int,hex);
    END;

    [Test]
    PROCEDURE TestHex2IntIncorrectString10@14();
    VAR
      int@1002 : BigInteger;
      hex@1001 : Code[20];
    BEGIN
      hex := 'ABCDEFG';
      IF hex2intTry(hex,int) THEN
        ERROR('I expected the hex2int("%1") to fail, but it returned %2',hex,int);
    END;

    [Test]
    PROCEDURE TestHex2IntIncorrectString11@11();
    VAR
      int@1002 : BigInteger;
      hex@1001 : Code[20];
    BEGIN
      hex := 'ABZDE';
      IF hex2intTry(hex,int) THEN
        ERROR('I expected the hex2int("%1") to fail, but it returned %2',hex,int);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 85303 Test Challenge 03
{
  OBJECT-PROPERTIES
  {
    Date=05-11-19;
    Time=19:05:47;
    Version List=TestChallenge1.00;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [Test]
    PROCEDURE TestNavisionPowerFunction1@10();
    VAR
      int1@1000 : BigInteger;
      int2@1005 : BigInteger;
      i@1003 : Integer;
      j@1004 : Integer;
    BEGIN
      FOR i := 1 TO 14 DO BEGIN
        int1 := 1;
        FOR j := 1 TO i DO
          int1 := int1 * 16;
        int1 := int1 - 1;
        int2 := POWER(16,i) - 1;
        IF NOT (int1 = int2) THEN
          ERROR('Expected: POWER(16,%1)-1 should result in (16^%1)-1. Got "%3" <> "%2"',i,int1,int2);
      END;
    END;

    [Test]
    PROCEDURE TestNavisionPowerFunction2@11();
    VAR
      int1@1000 : BigInteger;
      int2@1005 : BigInteger;
      i@1003 : Integer;
      j@1004 : Integer;
    BEGIN
      i := 15;
      int1 := 1;
      FOR j := 1 TO i DO
        int1 := int1 * 16;
      int2 := POWER(16,i);
      IF NOT (int1 = int2) THEN
        ASSERTERROR ERROR('Expected: POWER(16,%1) - 16^%1 = 0. Got "%2"',i,int2-int1);
      // This was not supposed to fail, but it does.
      // Remove the ASSERTERROR to see the error message.
    END;

    BEGIN
    {
      This test illustrates a bug in the standard POWER function in Dynamics NAV.
      16 to the power of 15 fails compared to simply multiplying 16 with itself 15 times.
    }
    END.
  }
}

